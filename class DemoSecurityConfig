import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;


@Configuration
@EnableWebSecurity
public class DemoSecurityConfig extends WebSecurityConfigurerAdapter {

	// reference for security data source in DemoAppConfig file
	@Autowired
	private DataSource securityDataSource;

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		//configure security for login
		http.authorizeRequests()
			.antMatchers("/").hasRole("EMPLOYEE")
			.antMatchers("/leaders/**").hasRole("LEADER")
			.antMatchers("/systems/**").hasRole("ADMINISTRATOR")
		
			.and().formLogin().loginPage("/showMyLoginPage")
			.loginProcessingUrl("/authenticateTheUser")
			.permitAll().and().logout().permitAll()
			
			.and().exceptionHandling().accessDeniedPage("/denied");
	}
	
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		
		//jdbc authentication 
		auth.jdbcAuthentication().dataSource(securityDataSource);

	}

}


@Configuration
@EnableWebSecurity
public class DemoSecurityConfig extends WebSecurityConfigurerAdapter {

	// reference for security data source in DemoAppConfig file
	@Autowired
	private DataSource securityDataSource;

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		//configure security for login
		http.authorizeRequests()
			.antMatchers("/").hasRole("EMPLOYEE")
			.antMatchers("/leaders/**").hasRole("LEADER")
			.antMatchers("/systems/**").hasRole("ADMINISTRATOR")
		
			.and().formLogin().loginPage("/showMyLoginPage")
			.loginProcessingUrl("/authenticateTheUser")
			.permitAll().and().logout().permitAll()
			
			.and().exceptionHandling().accessDeniedPage("/denied");
	}
	
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		
		//jdbc authentication 
		auth.jdbcAuthentication().dataSource(securityDataSource);

	}

}
