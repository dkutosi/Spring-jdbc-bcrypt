

@Configuration
@EnableWebMvc
@ComponentScan(basePackages="com.luv2code.springsecurity.demo")
@PropertySource("classpath:persistence-mysql.properties")
public class DemoAPPCOnfig {

	//variable to hold the properties
	@Autowired
	private Environment env;
	
	
	//logger for diagnostics
	private Logger logger = Logger.getLogger(getClass().getName());
	
	//define a bean for ViewResolver
	@Bean
	public ViewResolver viewResoler() {
		
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();
		
		viewResolver.setPrefix("/WEB-INF/view/");
		viewResolver.setSuffix(".jsp");
		
		return viewResolver;
	}
	
	//bean for security datasource
	@Bean
	public DataSource securityDataSource() {
		
		//connection pool
		ComboPooledDataSource securityDataSource = new ComboPooledDataSource();
		
		//jdbc driver class
		try {
			securityDataSource.setDriverClass(env.getProperty("jdbc.driver"));
		} catch (PropertyVetoException exc) {
			System.out.println("Data source failed this point");
			throw new RuntimeException(exc);
		}
		
		//log the database  connection props		
		logger.info(">>> jdbc.url=: "+env.getProperty("jdbc.url"));
		logger.info(">>> jdbc.user: "+env.getProperty("jdbc.user"));
		logger.info(">>> jdbc.password: "+env.getProperty("jdbc.password"));
		
		//database connection properties
		securityDataSource.setJdbcUrl(env.getProperty("jdbc.url"));
		securityDataSource.setUser(env.getProperty("jdbc.user"));
		securityDataSource.setPassword(env.getProperty("jdbc.password"));
		
		//set connection pools props
		securityDataSource.setInitialPoolSize(getIntProperty("connection.pool.initialPoolSize"));
		securityDataSource.setMinPoolSize(getIntProperty("connection.pool.minPoolSize"));
		securityDataSource.setMaxPoolSize(getIntProperty("connection.pool.maxPoolSize"));
		securityDataSource.setMaxIdleTime(getIntProperty("connection.pool.maxIdleTime"));
		

		return securityDataSource;
	} 
	
	//helper method
	//read environment property and convert it to int
	private int getIntProperty(String propName) {
		
		String propVal = env.getProperty(propName);
		
		int intPropVal = Integer.parseInt(propVal);
		
		return(int) intPropVal;
	}
	
	

}
